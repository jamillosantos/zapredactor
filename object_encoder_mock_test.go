// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/zap/zapcore (interfaces: ObjectEncoder)

// Package zapredactor is a generated GoMock package.
package zapredactor

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	zapcore "go.uber.org/zap/zapcore"
)

// MockObjectEncoder is a mock of ObjectEncoder interface.
type MockObjectEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockObjectEncoderMockRecorder
}

// MockObjectEncoderMockRecorder is the mock recorder for MockObjectEncoder.
type MockObjectEncoderMockRecorder struct {
	mock *MockObjectEncoder
}

// NewMockObjectEncoder creates a new mock instance.
func NewMockObjectEncoder(ctrl *gomock.Controller) *MockObjectEncoder {
	mock := &MockObjectEncoder{ctrl: ctrl}
	mock.recorder = &MockObjectEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectEncoder) EXPECT() *MockObjectEncoderMockRecorder {
	return m.recorder
}

// AddArray mocks base method.
func (m *MockObjectEncoder) AddArray(arg0 string, arg1 zapcore.ArrayMarshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArray", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddArray indicates an expected call of AddArray.
func (mr *MockObjectEncoderMockRecorder) AddArray(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArray", reflect.TypeOf((*MockObjectEncoder)(nil).AddArray), arg0, arg1)
}

// AddBinary mocks base method.
func (m *MockObjectEncoder) AddBinary(arg0 string, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBinary", arg0, arg1)
}

// AddBinary indicates an expected call of AddBinary.
func (mr *MockObjectEncoderMockRecorder) AddBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBinary", reflect.TypeOf((*MockObjectEncoder)(nil).AddBinary), arg0, arg1)
}

// AddBool mocks base method.
func (m *MockObjectEncoder) AddBool(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBool", arg0, arg1)
}

// AddBool indicates an expected call of AddBool.
func (mr *MockObjectEncoderMockRecorder) AddBool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBool", reflect.TypeOf((*MockObjectEncoder)(nil).AddBool), arg0, arg1)
}

// AddByteString mocks base method.
func (m *MockObjectEncoder) AddByteString(arg0 string, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddByteString", arg0, arg1)
}

// AddByteString indicates an expected call of AddByteString.
func (mr *MockObjectEncoderMockRecorder) AddByteString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddByteString", reflect.TypeOf((*MockObjectEncoder)(nil).AddByteString), arg0, arg1)
}

// AddComplex128 mocks base method.
func (m *MockObjectEncoder) AddComplex128(arg0 string, arg1 complex128) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddComplex128", arg0, arg1)
}

// AddComplex128 indicates an expected call of AddComplex128.
func (mr *MockObjectEncoderMockRecorder) AddComplex128(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComplex128", reflect.TypeOf((*MockObjectEncoder)(nil).AddComplex128), arg0, arg1)
}

// AddComplex64 mocks base method.
func (m *MockObjectEncoder) AddComplex64(arg0 string, arg1 complex64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddComplex64", arg0, arg1)
}

// AddComplex64 indicates an expected call of AddComplex64.
func (mr *MockObjectEncoderMockRecorder) AddComplex64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComplex64", reflect.TypeOf((*MockObjectEncoder)(nil).AddComplex64), arg0, arg1)
}

// AddDuration mocks base method.
func (m *MockObjectEncoder) AddDuration(arg0 string, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDuration", arg0, arg1)
}

// AddDuration indicates an expected call of AddDuration.
func (mr *MockObjectEncoderMockRecorder) AddDuration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDuration", reflect.TypeOf((*MockObjectEncoder)(nil).AddDuration), arg0, arg1)
}

// AddFloat32 mocks base method.
func (m *MockObjectEncoder) AddFloat32(arg0 string, arg1 float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFloat32", arg0, arg1)
}

// AddFloat32 indicates an expected call of AddFloat32.
func (mr *MockObjectEncoderMockRecorder) AddFloat32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFloat32", reflect.TypeOf((*MockObjectEncoder)(nil).AddFloat32), arg0, arg1)
}

// AddFloat64 mocks base method.
func (m *MockObjectEncoder) AddFloat64(arg0 string, arg1 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFloat64", arg0, arg1)
}

// AddFloat64 indicates an expected call of AddFloat64.
func (mr *MockObjectEncoderMockRecorder) AddFloat64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFloat64", reflect.TypeOf((*MockObjectEncoder)(nil).AddFloat64), arg0, arg1)
}

// AddInt mocks base method.
func (m *MockObjectEncoder) AddInt(arg0 string, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt", arg0, arg1)
}

// AddInt indicates an expected call of AddInt.
func (mr *MockObjectEncoderMockRecorder) AddInt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt", reflect.TypeOf((*MockObjectEncoder)(nil).AddInt), arg0, arg1)
}

// AddInt16 mocks base method.
func (m *MockObjectEncoder) AddInt16(arg0 string, arg1 int16) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt16", arg0, arg1)
}

// AddInt16 indicates an expected call of AddInt16.
func (mr *MockObjectEncoderMockRecorder) AddInt16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt16", reflect.TypeOf((*MockObjectEncoder)(nil).AddInt16), arg0, arg1)
}

// AddInt32 mocks base method.
func (m *MockObjectEncoder) AddInt32(arg0 string, arg1 int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt32", arg0, arg1)
}

// AddInt32 indicates an expected call of AddInt32.
func (mr *MockObjectEncoderMockRecorder) AddInt32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt32", reflect.TypeOf((*MockObjectEncoder)(nil).AddInt32), arg0, arg1)
}

// AddInt64 mocks base method.
func (m *MockObjectEncoder) AddInt64(arg0 string, arg1 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt64", arg0, arg1)
}

// AddInt64 indicates an expected call of AddInt64.
func (mr *MockObjectEncoderMockRecorder) AddInt64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt64", reflect.TypeOf((*MockObjectEncoder)(nil).AddInt64), arg0, arg1)
}

// AddInt8 mocks base method.
func (m *MockObjectEncoder) AddInt8(arg0 string, arg1 int8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt8", arg0, arg1)
}

// AddInt8 indicates an expected call of AddInt8.
func (mr *MockObjectEncoderMockRecorder) AddInt8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt8", reflect.TypeOf((*MockObjectEncoder)(nil).AddInt8), arg0, arg1)
}

// AddObject mocks base method.
func (m *MockObjectEncoder) AddObject(arg0 string, arg1 zapcore.ObjectMarshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddObject indicates an expected call of AddObject.
func (mr *MockObjectEncoderMockRecorder) AddObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddObject", reflect.TypeOf((*MockObjectEncoder)(nil).AddObject), arg0, arg1)
}

// AddReflected mocks base method.
func (m *MockObjectEncoder) AddReflected(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReflected", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReflected indicates an expected call of AddReflected.
func (mr *MockObjectEncoderMockRecorder) AddReflected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReflected", reflect.TypeOf((*MockObjectEncoder)(nil).AddReflected), arg0, arg1)
}

// AddString mocks base method.
func (m *MockObjectEncoder) AddString(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddString", arg0, arg1)
}

// AddString indicates an expected call of AddString.
func (mr *MockObjectEncoderMockRecorder) AddString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddString", reflect.TypeOf((*MockObjectEncoder)(nil).AddString), arg0, arg1)
}

// AddTime mocks base method.
func (m *MockObjectEncoder) AddTime(arg0 string, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTime", arg0, arg1)
}

// AddTime indicates an expected call of AddTime.
func (mr *MockObjectEncoderMockRecorder) AddTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTime", reflect.TypeOf((*MockObjectEncoder)(nil).AddTime), arg0, arg1)
}

// AddUint mocks base method.
func (m *MockObjectEncoder) AddUint(arg0 string, arg1 uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint", arg0, arg1)
}

// AddUint indicates an expected call of AddUint.
func (mr *MockObjectEncoderMockRecorder) AddUint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint", reflect.TypeOf((*MockObjectEncoder)(nil).AddUint), arg0, arg1)
}

// AddUint16 mocks base method.
func (m *MockObjectEncoder) AddUint16(arg0 string, arg1 uint16) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint16", arg0, arg1)
}

// AddUint16 indicates an expected call of AddUint16.
func (mr *MockObjectEncoderMockRecorder) AddUint16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint16", reflect.TypeOf((*MockObjectEncoder)(nil).AddUint16), arg0, arg1)
}

// AddUint32 mocks base method.
func (m *MockObjectEncoder) AddUint32(arg0 string, arg1 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint32", arg0, arg1)
}

// AddUint32 indicates an expected call of AddUint32.
func (mr *MockObjectEncoderMockRecorder) AddUint32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint32", reflect.TypeOf((*MockObjectEncoder)(nil).AddUint32), arg0, arg1)
}

// AddUint64 mocks base method.
func (m *MockObjectEncoder) AddUint64(arg0 string, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint64", arg0, arg1)
}

// AddUint64 indicates an expected call of AddUint64.
func (mr *MockObjectEncoderMockRecorder) AddUint64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint64", reflect.TypeOf((*MockObjectEncoder)(nil).AddUint64), arg0, arg1)
}

// AddUint8 mocks base method.
func (m *MockObjectEncoder) AddUint8(arg0 string, arg1 byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint8", arg0, arg1)
}

// AddUint8 indicates an expected call of AddUint8.
func (mr *MockObjectEncoderMockRecorder) AddUint8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint8", reflect.TypeOf((*MockObjectEncoder)(nil).AddUint8), arg0, arg1)
}

// AddUintptr mocks base method.
func (m *MockObjectEncoder) AddUintptr(arg0 string, arg1 uintptr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUintptr", arg0, arg1)
}

// AddUintptr indicates an expected call of AddUintptr.
func (mr *MockObjectEncoderMockRecorder) AddUintptr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUintptr", reflect.TypeOf((*MockObjectEncoder)(nil).AddUintptr), arg0, arg1)
}

// OpenNamespace mocks base method.
func (m *MockObjectEncoder) OpenNamespace(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OpenNamespace", arg0)
}

// OpenNamespace indicates an expected call of OpenNamespace.
func (mr *MockObjectEncoderMockRecorder) OpenNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenNamespace", reflect.TypeOf((*MockObjectEncoder)(nil).OpenNamespace), arg0)
}
