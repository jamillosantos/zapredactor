{% import "github.com/jamillosantos/zapredactor/internal/domain" %}

{% func Redactor(info domain.Package) -%}
// Code generated by zapredactor. DO NOT EDIT.
package {%s info.Name %}

import (
	"github.com/jamillosantos/zapredactor"
	{%- if info.IncludeZapArray -%}"github.com/jamillosantos/zapredactor/zaparray"{%- endif -%}
	"go.uber.org/zap/zapcore"
)

{% for _, s := range info.Structs -%}
{%= RenderStruct(s) %}
{%- endfor %}
{% endfunc %}

{% func RenderStruct(s domain.RedactedStruct) -%}
func (s {%s s.Name %}) Redact(encoder zapcore.ObjectEncoder) error {
{%- for _, field := range s.Fields -%}
	{%= RenderField(field) -%}
{%- endfor -%}
	return nil
}

{% endfunc %}

{% func RenderValueType(field domain.RedactedField, t string) -%}
{%- if field.IsPointer -%}
	if s.{%s field.Name %} == nil {
		encoder.AddReflected("{%s field.Name %}", nil)
	} else {
{%- endif -%}
encoder.Add{%s t %}("{%s field.ExportedName %}", {%- if field.IsPointer -%}*{%- endif -%}s.{%s field.Name %})
{%- if field.IsPointer -%}
	}
{%- endif -%}
{%- endfunc %}

{% func RenderArray(field domain.RedactedField, t string) -%}
encoder.AddArray("{%s field.ExportedName %}", zaparray.{%s t %}(s.{%s field.Name %}))
{%- endfunc %}

{% func RenderValueRedacted(field domain.RedactedField, redactor string) -%}
encoder.AddString("{%s field.ExportedName %}", zapredactor.RedactValue(s.{%s field.Name %}, "{%j redactor %}"))
{%- endfunc %}

{% func RenderObjectRedacted(field domain.RedactedField) -%}
	{% if field.IsPointer -%}
	if s.{%s field.Name %} == nil {
		encoder.AddReflected("{%s field.ExportedName %}", nil)
	} else {
	{%- endif -%}
	encoder.AddObject("{%s field.ExportedName %}", zapredactor.RedactObject({% if !field.IsPointer %}&{% endif %}s.{%s field.Name %}))
	{%- if field.IsPointer -%}
	}
	{%- endif -%}
{%- endfunc %}
